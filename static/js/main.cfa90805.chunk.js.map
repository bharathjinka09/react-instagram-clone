{"version":3,"sources":["firebase.js","Post.js","ImageUpload.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","storage","Post","postId","user","username","caption","imageUrl","useState","comments","setComments","comment","setComment","useEffect","unsubscribe","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","className","Avatar","alt","src","text","type","placeholder","value","onChange","e","target","disabled","onClick","event","preventDefault","add","displayName","timestamp","FieldValue","serverTimestamp","ImageUpload","image","setImage","progress","setProgress","setCaption","max","TextField","files","Button","style","margin","size","variant","color","ref","name","put","on","Math","round","bytesTransferred","totalBytes","error","console","log","alert","message","child","getDownloadURL","then","url","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","classes","modalStyle","posts","setPosts","open","setOpen","openSignIn","setOpenSignIn","setUsername","password","setPassword","email","setEmail","setUser","onAuthStateChanged","authUser","id","post","Modal","onClose","Input","createUserWithEmailAndPassword","updateProfile","catch","signInWithEmailAndPassword","signOut","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cfa90805.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyC2VBRWmYSmItq-CLRYnvSakufUsOMVdNc\",\n  authDomain: \"instagram-clone-ee5c2.firebaseapp.com\",\n  databaseURL: \"https://instagram-clone-ee5c2.firebaseio.com\",\n  projectId: \"instagram-clone-ee5c2\",\n  storageBucket: \"instagram-clone-ee5c2.appspot.com\",\n  messagingSenderId: \"510957695911\",\n  appId: \"1:510957695911:web:d6d2ae2264471f1a0d3c82\",\n  measurementId: \"G-F7BGQS38K0\"\n};\n\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig)\n\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\nconst storage = firebase.storage();\n\nexport { db, auth, storage };\n\n// export default firebaseConfig","import React, { useState, useEffect } from 'react'\nimport './Post.css';\nimport { db } from './firebase';\nimport Avatar from '@material-ui/core/Avatar'\nimport firebase from 'firebase'\n\nfunction Post({ postId, user ,username, caption, imageUrl }){\n    \n    const [comments, setComments] = useState([]);\n    const [comment, setComment] = useState([]);\n\n    useEffect(() => {\n    \tlet unsubscribe;\n    \tif (postId){\n    \t\tunsubscribe = db\n    \t\t  .collection('posts')\n    \t\t  .doc(postId)\n    \t\t  .collection('comments')\n    \t\t  .orderBy('timestamp', 'desc')\n    \t\t  .onSnapshot((snapshot) => {\n    \t\t  \tsetComments(snapshot.docs.map((doc) => doc.data()));\n    \t\t  });\n    \t}\n\n    \treturn () => {\n    \t\tunsubscribe();\n    \t};\n    }, [postId]);\n\n    const postComment = (event) => {\n         event.preventDefault();\n\n         db.collection('posts').doc(postId).collection('comments').add({\n         \ttext: comment,\n         \tusername: user.displayName,\n         \ttimestamp: firebase.firestore.FieldValue.serverTimestamp()\n         });\n         setComment('');\n    }\n\n\treturn (\n\t\t<div className=\"post center\">\n\t\t<div className=\"post__header\">\n\t\t\t<Avatar\n\t\t\tclassName=\"post__avatar\"\n\t\t\talt='Avatar'\n\t\t\tsrc={imageUrl} \n\t\t\t/>\n\t\t\t<h3>{username}</h3>\n\t\t</div>\n\t\t\t\n\n\t\t\t<img \n\t\t\tclassName=\"post__image\"\n\t\t\tsrc={imageUrl} \n\t\t\talt=\"postImage\" />\n\n\t\t\t<h4 className=\"post__text\"><strong>{username}</strong> {caption}</h4>\n\n\t\t\t\n\n\t\t\t<div className='post__comments'>\n             {comments.map((comment) =>(\n                <p>\n                  <strong>{comment.username}</strong> {comment.text}\n                </p>\n          \n             ))}\n\n\t\t\t</div>\n\n\t\t\t{user && (\n\t\t\t\t<form className=\"post__commentBox\">\n\t              <input\n\t                className=\"post__input\"\n\t                type=\"text\"\n\t                placeholder=\"Add a comment...\"\n\t                value={comment}\n\t                onChange={(e) => setComment(e.target.value)}\n\t              />\n\n\t              <button \n\t              className='post__button'\n\t              disabled={!comment}\n\t              type=\"submit\"\n\t              onClick={postComment}\n\t              >\n\t              Comment\n\t              </button>\n\t\t\t\t</form>\n\t\t\t\t)\n\t\t}\n\n\t\t</div>\n\t)\n}\n\nexport default Post","import React, { useState } from 'react'\nimport { Button } from '@material-ui/core'\nimport { storage, db } from './firebase'\nimport firebase from 'firebase';\nimport './ImageUpload.css'\nimport { TextField } from '@material-ui/core';\n\n\nfunction ImageUpload({username}){\n\n\tconst [image, setImage] = useState(null);\n\tconst [progress, setProgress] = useState(0);\n\tconst [caption, setCaption] = useState('');\n    \n    const handleChange = (e) => {\n    \tif (e.target.files[0]){\n    \t \tsetImage(e.target.files[0]);\n    \t }\n    };\n\n    const handleUpload = () => {\n       const uploadTask = storage.ref(`images/${image.name}`).put(image);\n\n       uploadTask.on(\n         \"state_changed\",\n         (snapshot) => {\n         \t// progress function...\n         \tconst progress = Math.round(\n                (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n         \t);\n         \tsetProgress(progress)\n         },\n         (error) => {\n         \t// Error function\n         \tconsole.log(error);\n         \talert(error.message);\n         },\n         () => {\n         \t// complete function...\n         \tstorage\n         \t   .ref(\"images\")\n         \t   .child(image.name)\n         \t   .getDownloadURL()\n         \t   .then(url => {\n         \t   \t// post image inside db\n         \t   \tdb.collection('posts').add({\n                  timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                  caption: caption,\n                  imageUrl: url,\n                  username: username\n         \t   \t});\n\n         \t   \tsetProgress(0);\n         \t   \tsetCaption('');\n         \t   \tsetImage(null);\n\n         \t   })\n         }\n       \t)\n    }\n\n\treturn (\n\t\t<div className=\"imageupload\">\n\t\t  <progress className='imageupload__progress' value={progress} max=\"100\" />\n\t\t  <br/>\n\t\t  <TextField \n\t\t  type=\"text\" \n\t\t  placeholder=\"Enter a caption....\" \n\t\t  onChange={event => setCaption(event.target.value)}\n\t\t  value={caption} \n\t\t  />\n\t\t  <br/>\n\n\t\t  <input type=\"file\" onChange={handleChange} /> \n\t\t  <br/>\n\t\t  \n\t\t  <Button style={{margin:'1rem'}} size=\"small\" variant=\"contained\" color=\"primary\" onClick={handleUpload}>\n           Upload\n\t\t  </Button>\n\t\t</div>\n\t\t)\n}\n\nexport default ImageUpload","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Post from './Post'\nimport ImageUpload from './ImageUpload'\nimport { db, auth } from './firebase'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal'\nimport { Button, Input } from '@material-ui/core'\nimport InstagramEmbed from 'react-instagram-embed'\n\nfunction getModalStyle(){\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({ \n  paper:{\n    position: 'absolute',\n    width: '50%',\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid black',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2,4,3),\n  },\n\n}));\n\n\nfunction App() {\n  const classes = useStyles(); \n  const [modalStyle] = useState(getModalStyle);\n \n  const [posts, setPosts] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [openSignIn, setOpenSignIn] = useState(false);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [email, setEmail] = useState('');\n  const [user, setUser] = useState(null);\n  \n  useEffect(() => {\n   const unsubscribe = auth.onAuthStateChanged((authUser) => {\n      if (authUser){\n        // user has logged in...\n        console.log(authUser)\n        setUser(authUser);\n      } else {\n        // user has logged out...\n        setUser(null);\n      }\n    })\n\n    return () => {\n      // perform some cleanup actions\n      unsubscribe();\n    }\n\n  }, [user, username]);\n\n  // useEffect runs a piece of code based on a specific condition \n  useEffect(() => {\n    // this is where code runs\n    db.collection('posts').orderBy('timestamp','desc').onSnapshot(snapshot => {\n      // everytime a new post is added, this code runs\n      setPosts(snapshot.docs.map(doc => ({\n        id: doc.id,\n        post: doc.data()\n      })));\n    })\n  }, []);\n\n\n  const signUp = (event) => {\n\n    event.preventDefault();\n\n    auth\n    .createUserWithEmailAndPassword(email, password)\n    .then((authUser) => {\n      return authUser.user.updateProfile({\n        displayName: username\n      })\n    })\n    .catch((error) => alert(error.message));\n\n    setOpen(false);\n  }\n\n  const signIn = (event) => {\n    event.preventDefault();\n\n    auth\n     .signInWithEmailAndPassword(email, password)\n     .catch((error) => alert(error.message))\n\n     setOpenSignIn(false);\n  }\n\n  return (\n    <div className=\"app\">\n      <Modal \n      open={open}\n      onClose={() => setOpen(false)}\n      >\n      <div style={modalStyle} className={classes.paper}>\n        <center>\n          <img \n          className=\"app__headerImage\"\n          src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n          alt=\"Instagram\"\n          />\n        </center>\n        <form className=\"app__signup\">\n\n          <Input\n          placeholder=\"Username\"\n          type=\"text\"\n          value={username}\n          onChange={(e) => setUsername(e.target.value)}\n          />\n\n          <Input\n          placeholder=\"Email\"\n          type=\"email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          />\n\n          <Input\n          placeholder=\"Password\"\n          type=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          />\n          <br />\n\n          <Button variant=\"contained\" color=\"primary\" type=\"submit\" onClick={signUp}>Sign Up</Button>\n          </form>\n      </div>\n\n      </Modal>\n\n      <Modal\n      open={openSignIn}\n      onClose={() => setOpenSignIn(false)}\n      >\n      <div style={modalStyle} className={classes.paper}>\n        <center>\n          <img \n          className=\"app__headerImage\"\n          src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n          alt=\"Instagram\"\n          />\n        </center>\n        <form className=\"app__signin\">\n          <Input\n          placeholder=\"Email\"\n          type=\"email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          />\n\n          <Input\n          placeholder=\"Password\"\n          type=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          />\n          <br />\n          <Button variant=\"contained\" color=\"primary\" type=\"submit\" onClick={signIn}>Sign In</Button>\n          </form>\n      </div>\n\n      </Modal>\n\n      <div className=\"app__header\">\n        <img \n        className=\"app__headerImage\" \n        src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n        alt=\"logo\"\n        />\n      {user ? ( \n            <Button size=\"small\" variant=\"contained\" color=\"secondary\" onClick={() => auth.signOut()}>Logout</Button>\n          ):(\n            <div className=\"app__loginContainer\">\n              <Button style={{margin:'3px'}} size=\"small\" variant=\"contained\" color=\"primary\" onClick={() => setOpenSignIn(true)}>Sign In</Button>\n              <Button style={{margin:'3px'}} size=\"small\" variant=\"contained\" onClick={() => setOpen(true)}>Sign Up</Button>\n            </div>\n          )}\n      </div>\n      \n      <div className='app__posts'>\n        {/* <div className='app__postsLeft'>\n        */ }\n        {\n          posts.map(({id, post}) => (\n            <Post key={id} postId={id} user={user} username={post.username} caption={post.caption} imageUrl={post.imageUrl} />\n          ))\n        }\n        {/* </div> */ }\n        {/* <div className='app__postsRight'>\n\n          <InstagramEmbed\n          url='https://www.instagram.com/p/B_uf9dmAGPw/'\n          maxWidth={320}\n          hideCaption={false}\n          containerTagName='div'\n          protocol=''\n          injectScript\n          onLoading={() => {}}\n          onSuccess={() => {}}\n          onAfterRender={() => {}}\n          onFailure={() => {}}\n          />\n        </div> */ }\n      </div>\n\n      {user?.displayName ? (\n               <ImageUpload username={user.displayName} />\n               \n            ):(\n               \n               <h3 style={{'textAlign': 'center', 'padding': '2%'}}>Please login to upload!</h3>\n\n      )}\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}